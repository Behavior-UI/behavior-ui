<div class="bs-docs-section">
  <div class="page-header">
    <h1>Invoke <small>Behavior.Invoke.js</small></h1>
  </div>
  <p>A generic handler for invoking element methods on any element.</p>


  <div class="bs-callout bs-callout-danger">
    <h4>Use the Delegator When Possible</h4>
    <p>The <code>Invoke</code> Behavior has a sister implementation in <code>Delegator.Invoke</code>
      (see <%= link_to "docs / examples", sandbox_dir_file_path(section: 'JavaScript', dir: "Delegators", file: "Delegator.Invoke") %>)
      that is the prefered implementation to use.</p>
    <h4>When should you use this behavior?</h4>
    <p>Use this behavior filter when you have a bunch of items that have links that you want to use to invoke
      an element method. Imagine a table of things or a form with tons of inputs. This behavior lets you declare
      desired behavior on the top level element (the table, the form) and monitor child elements for events
      (clicking a row, changing an input) and then invoke an element method on an element relative to the parent
      (the table, the form) or the target (the row, the input).</p>
    <p>This is rather specialized, which is why the delegator is the preferred usage.</p>
  </div>


  <h3>Examples</h3>
  <p>The example below shows two uses of this filter. First, on the top level element, you can see
    how the pattern works when you use a parent element to watch for events on child elements. This
    allows a form to watch for changes on all its inputs, for example.</p>
  <p>But the other use is a specific element that, when interacted with, invokes the desired method.
    I.e. click this button and change that element over there. Here there's no delegation and the
    event target is the element with the filter.</p>

  <%= render layout: "codeblock" do %>
<div data-behavior="Invoke"
  data-invoke-options="
    'events':[
      'change:relay(input)',
      'click:relay(.toRed)'
    ],
    'action':'addClass',
    'args':['red'],
    'targets':'input'
  ">
    <div class="form-group">
      <label for="one">This turns red when you change it</label>
      <input id="one" type="text" class="form-control"/>
    </div>
    <button type="submit" class="btn btn-default toRed">Clicking me also turns the input red</button>
    <button type="submit" class="btn btn-default" data-behavior="Invoke"
      data-invoke-options="
        'action': 'removeClass',
        'args': ['red'],
        'targets': '!div input'
      "
    >Clicking me also turns the input white again</button>
 </div>
  <% end %>


  <h2>Behavior Options</h2>
  <p>These options apply only to the <code>data-</code> tag invocation.</p>
  <div class="table-responsive">
    <table class="table table-striped table-bordered">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 50px;">type</th>
         <th style="width: 50px;">default</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>

        <tr>
          <td>events</td>
          <td>array</td>
          <td>['click']</td>
          <td>A list of events to monitor on the element with the filter. Can specify delegated
            events (e.g. <code>['click:relay(input)']</code>) and, as an array, can specify numeroud
            such events. The default setting makes the filter monitor the elmeent with the
            filter for clicks.
            <p>If you're not using a relayed event (<code>'click:relay(.foo)'</code>] then you
              should probably be using
              <%= link_to "Delegator.Invoke", sandbox_dir_file_path(section: 'JavaScript', dir: "Thanx_Delegators", file: "Delegator.Invoke") %></p>
          </td>
        </tr>
        <tr>
          <td>action</td>
          <td>string</td>
          <td>~</td>
          <td>What method to invoke. This can be <em>any</em> element method. This includes all the
            <a href="http://mootools.net/docs/core/Element/Element">MooTools Element methods</a> and,
            for that matter, any element shortcuts (such as
            <a href="http://mootools.net/docs/core/Fx/Fx.Tween">Fx.Tween</a>'s <code>.tween</code> method)
            including methods you add to the Element prototype yourself.
          </td>
        </tr>
        <tr>
          <td>args</td>
          <td>array</td>
          <td>~</td>
          <td>The arguments passed to the method. If you don't want to pass any arguments, you still need
            to specify an (empty) array.</td>
        </tr>
        <tr>
          <td>targets</td>
          <td>string</td>
          <td>~</td>
          <td>The selector to find elements to invoke the method on. This is required unless you pass
            in an option for <code>targetsFromEventTarget</code>.</td>
        </tr>
        <tr>
          <td>targetsFromEventTarget</td>
          <td>string</td>
          <td>~</td>
          <td>Same as the <code>targets</code> option except that this runs the selector against the element
            that triggered the event (i.e. the button you clicked on, not the element with the filter).
            This is useful if you wish to have a button for each row in a table that does something to
            its own row, for example. You could add a filter to each item and have it search for its row,
            but this option lets you add the behavior to the container only once and do the search at event time.</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
